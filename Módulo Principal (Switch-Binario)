//Este é o módulo principal do programa, nele são chamados todos os outros módulos. 

/* 
Converte as entradas binárias nos switches da placa em um ASCII de um caractere definido previamente sendo
exibido nos LEDs
*/

//ENTRADAS E SAÍDAS
module switch_binary(

    input wire A,
    input wire B,
    input wire C,
    input wire D,
    input wire E,
    output wire S0,
    output wire S1,
    output wire S2,
    output wire S3,
    output wire S4,
    output wire S5,
    output wire S6,
output wire S0_hex,
output wire S1_hex,
output wire S2_hex,
output wire S3_hex,
output wire S4_hex,
output wire S5_hex,
output wire S6_hex,

output wire S7_hex,
output wire S8_hex,
output wire S9_hex,
output wire S10_hex,
output wire S11_hex,
output wire S12_hex,
output wire S13_hex,

output wire S14_hex,
output wire S15_hex,
output wire S16_hex,
output wire S17_hex,
output wire S18_hex,
output wire S19_hex,
output wire S20_hex,

output wire S21_hex,
output wire S22_hex,
output wire S23_hex,
output wire S24_hex,
output wire S25_hex,
output wire S26_hex


);

//FIOS INTERMEDIÁRIOS

wire w1, w2, w3, w4, w5, w6;
wire w7, w8, w9, w10, w11, w12;
wire w13, w14, w15, w16, w17, w18;
wire w19, w20, w21, w22, w23, w24;
wire Dn, Bn, Cn, An, En;

//Chama o módulo que converte os 4 dígitos mais significativos do ASCII do caractere em uma exibição no display de 7 segmentos.
binary_hexadecimal(.B(S0), .C(S1), .D(S2), .out_a(S0_hex), .out_b(S1_hex), .out_c(S2_hex), .out_d(S3_hex), .out_e(S4_hex), .out_f(S5_hex), .out_g(S6_hex));

//Chama o módulo que converte os 4 dígitos menos significativos do ASCII do caractere em uma exibição no display de 7 segmentos
binary_hexadecimal_less(.A(S3), .B(S4), .C(S5), .D(S6), .out_a(S7_hex), .out_b(S8_hex), .out_c(S9_hex), .out_d(S10_hex), .out_e(S11_hex), .out_f(S12_hex), .out_g(S13_hex));

//Chama o módulo que converte um conjunto de entradas nos switches em uma exibição no display de 7 segmentos
switch_caractere(.a(A), .b(B), .c(C), .d(D), .e(E), .out_a(S14_hex), .out_b(S15_hex), .out_c(S16_hex), .out_d(S17_hex), .out_e(S18_hex), .out_f(S19_hex), .out_g(S20_hex));
error(.a(A), .b(B), .c(C), .d(D), .e(E), .s1(S21_hex), .s2(S22_hex), .s3(S23_hex), .s4(S24_hex), .s5(S25_hex), .s6(S26_hex));

// LÓGICA DO MÓDULO SWITCH-BINÁRIO
not(Dn,D);
not(Bn, B);
not(Cn, C);
not(An, A);
not(En, E);

//1
and(w1, B, D);
and(w2, B, C);
or(S0, w1, w2, A);

//2
and(w3, Cn, Dn);
or(S1, w3, Bn);

//3
and(w4, An, Bn);
and(w5, C, D, E);
and(w6, An, Cn, Dn);
and(w7, Bn, D, E);
or(S2, w4, w5, w6, w7);

//4
and(w8, B, Cn, Dn);
and(w9, B, C, D, E);
and(w10, A, D);
or(S3, w8, w9, w10);

//5
and(w11, Bn, C);
and(w12, C, Dn, E);
and(w13, C, D, En);
and(w14, A, E);
and(w15, A, D);
or(S4, w11, w12, w13, w14, w15);

//6
and(w16, B, C, Dn, En);
and(w17, A, En);
and(w18, An, Bn, D);
and(w19, An, D, E);
or(S5, w16, w17, w18, w19);

//7
and(w20, An, Bn, E);
and(w21, B, D, En);
and(w22, B, C, En);
and(w23, A, D, En);
and(w24, An, Cn, Dn, E);
or(S6, w20, w21, w22, w23, w24);

endmodule
